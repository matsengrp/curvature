import os
import subprocess
from SCons.Script import Command, Environment

env = Environment(ENV=os.environ)

no_slurm = bool(subprocess.call('which sbatch'.split()))

min_leaves = 4
max_leaves = 6
graph_types = ['rspr', 'nni']
random_walks = ['lurw', 'upmh']

curvatures_dir = 'curvatures/'
graphs_dir = 'graphs/'
scripts_dir = '../scripts/'
tangles_dir = '../tangle/rooted-symmetric/'


# First make graphs and associated files.

graphs = {t: {} for t in graph_types}
graph_degrees = {t: {} for t in graph_types}
tangle_degrees = {t: {} for t in graph_types}
tangle_newicks = {t: {} for t in graph_types}

for graph_type in graph_types:
    for n_leaves in range(min_leaves, max_leaves+1):
        tree_path = tangles_dir+'tree'+str(n_leaves)+'.tre',
        tangle_idx_path = tangles_dir+'tangle'+str(n_leaves)+'.idx'

        adjacencies = Command(
            graphs_dir+graph_type+'/graph'+str(n_leaves)+'.csv.gz',
            tree_path,
            scripts_dir+'trees-to-adjacencies.sh ' +
            graph_type+' $SOURCE $TARGET')[0]
        graph_path = str(adjacencies).split('.')[0]+'.sobj'

        graphs[graph_type][n_leaves] = Command(
            graph_path,
            adjacencies,
            scripts_dir+'adjacencies-to-graph.py $SOURCE $TARGET')

        graph_degrees[graph_type][n_leaves] = Command(
            graph_path.split('.')[0]+'.degrees.tsv',
            graph_path,
            scripts_dir+'graph-degrees.py $SOURCE $TARGET')

        tangle_degrees[graph_type][n_leaves] = Command(
            graphs_dir+graph_type+'/tangle'+str(n_leaves)+'.degrees.tsv',
            [tangle_idx_path,
             graph_degrees[graph_type][n_leaves]],
            scripts_dir+'tangle-infos.py ${SOURCES[0]} ${SOURCES[1]} $TARGET')
        tangle_newicks[graph_type][n_leaves] = Command(
            graphs_dir+graph_type+'/tangle'+str(n_leaves)+'.tre',
            [tangle_idx_path,
             tree_path],
            scripts_dir+'tangle-infos.py ${SOURCES[0]} ${SOURCES[1]} $TARGET')


# Then make curvatures and plots for those graphs.

for graph_type in graph_types:
    for walk in random_walks:
        curr_dir = os.path.join(curvatures_dir, graph_type, walk, '')
        cmd = scripts_dir+'ricci-tangle.py --walk '+walk + \
            ' --graph ${SOURCES[0]} --out'
        for n_leaves in range(min_leaves, max_leaves+1):
            if no_slurm:
                full_cmd = cmd+' $TARGET ${SOURCES[1]}'
            else:
                full_cmd = \
                    'multi-slurm.sh "'+cmd+' DST SRC" ${SOURCES[1]} $TARGET'
            curvatures = env.Command(
                curr_dir+'ricci'+str(n_leaves)+'.tsv',
                [graphs[graph_type][n_leaves],
                    tangles_dir+'tangle'+str(n_leaves)+'.idx'],
                full_cmd)
            results = Command(
                curr_dir+'results'+str(n_leaves)+'.p.gz',
                [curvatures,
                 tangle_newicks[graph_type][n_leaves],
                 tangle_degrees[graph_type][n_leaves]],
                scripts_dir+'merge-results.py $SOURCES $TARGET')
            env.Command(
                curr_dir+'hexbin'+str(n_leaves)+'.svg',
                results,
                scripts_dir+'plot.py --which hexbin $SOURCE $TARGET')
            env.Command(
                curr_dir+'scatter'+str(n_leaves)+'.svg',
                results,
                scripts_dir+'plot.py --which scatter $SOURCE $TARGET')
