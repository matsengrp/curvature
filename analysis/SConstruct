from glob import glob
import os
import subprocess
from SCons.Script import Command, Environment

env = Environment(ENV=os.environ)

no_slurm = bool(subprocess.call('which sbatch'.split()))

min_leaves = 4
max_leaves = 5

walk_seed = 0
walk_n_iter = 100
walk_sample_freq = 1

graph_types = ['rspr', 'nni']
random_walks = ['lurw', 'upmh']

curvatures_dir = 'curvatures/'
graphs_dir = 'graphs/'
scripts_dir = '../scripts/'
tangles_dir = '../tangle/rooted-symmetric/'
walks_dir = 'walks/'


# First make graphs and associated files.

# TODO: do we really need these dictionaries, or can we just re-assign in place?
graphs = {t: {} for t in graph_types}
graph_degrees = {t: {} for t in graph_types}
tangle_idxs = {t: {} for t in graph_types}
tangle_degrees = {t: {} for t in graph_types}
tangle_newicks = {t: {} for t in graph_types}
walks = {t: {} for t in graph_types}
access = {t: {} for t in graph_types}

for graph_type in graph_types:
    if graph_type == 'rspr':
        walk_flags = ''
    elif graph_type == 'nni':
        walk_flags = ' -nni '
    else:
        raise AssertionError

    for n_leaves in range(min_leaves, max_leaves+1):
        tree_path = tangles_dir+'tree'+str(n_leaves)+'.tre',
        curr_dir = walks_dir+graph_type

        # First make the graphs and degrees.
        # TODO: silly to depend on tangle's trees.
        spr_dense_graph = env.Command(
            '../spr_neighbors/spr_dense_graph',
            glob('../spr_neighbors/*{.cpp,.h}'),
            'make -C ../spr_neighbors')

        adjacencies = env.Command(
            graphs_dir+graph_type+'/graph'+str(n_leaves)+'.csv.gz',
            tree_path,
            scripts_dir+'trees-to-adjacencies.sh ' +
            graph_type+' $SOURCE $TARGET')[0]
        Depends(adjacencies, spr_dense_graph)
        graph_path = str(adjacencies).split('.')[0]+'.sobj'

        graphs[graph_type][n_leaves] = env.Command(
            graph_path,
            adjacencies,
            scripts_dir+'adjacencies-to-graph.py $SOURCE $TARGET')

        graph_degrees[graph_type][n_leaves] = env.Command(
            graph_path.split('.')[0]+'.degrees.tsv',
            graph_path,
            scripts_dir+'graph-degrees.py $SOURCE $TARGET')

        # Now do random walks and get access times.
        random_spr_walk = env.Command(
            '../random_spr_walk/random_spr_walk',
            glob('../random_spr_walk/*{.cpp,.h}'),
            'make -C ../random_spr_walk')

        walks[graph_type][n_leaves] = env.Command(
            curr_dir+'/walk'+str(n_leaves)+'.tsv.gz',
            random_spr_walk,
            '$SOURCE {} -seed {} -ntax {} -niterations {} -sfreq {} \
                | sed "s/: /\\t/" | gzip -cn > $TARGET'
            .format(walk_flags, walk_seed, n_leaves,
                    walk_n_iter, walk_sample_freq))

        tangle_time_count_out = env.Command(
            [curr_dir+'/access'+str(n_leaves)+'.tsv.gz',
             curr_dir+'/tangle'+str(n_leaves)+'.idx'],
            [scripts_dir+'tangle-time-count.py',
             walks[graph_type][n_leaves]],
            '${SOURCES[0]} -n '+str(n_leaves)+
                ' --oaccess ${TARGETS[0]} --otangle ${TARGETS[1]} ${SOURCES[1]}')
        access[graph_type][n_leaves] = tangle_time_count_out[0]
        tangle_idxs[graph_type][n_leaves] = tangle_time_count_out[1]

        tangle_degrees[graph_type][n_leaves] = env.Command(
            curr_dir+'/degrees'+str(n_leaves)+'.tsv',
            [tangle_idxs[graph_type][n_leaves],
             graph_degrees[graph_type][n_leaves]],
            scripts_dir+'tangle-infos.py ${SOURCES[0]} ${SOURCES[1]} $TARGET')

        tangle_newicks[graph_type][n_leaves] = env.Command(
            curr_dir+'/tangle'+str(n_leaves)+'.tre',
            [tangle_idxs[graph_type][n_leaves],
             tree_path],
            scripts_dir+'tangle-infos.py ${SOURCES[0]} ${SOURCES[1]} $TARGET')

        base_dir = curr_dir
        for walk in random_walks:
            curr_dir = os.path.join(base_dir, walk, '')
            cmd = scripts_dir+'ricci-tangle.py --walk '+walk + \
                ' --graph ${SOURCES[0]} --out'
            if no_slurm:
                full_cmd = cmd+' $TARGET ${SOURCES[1]}'
            else:
                full_cmd = \
                    'multi-slurm.sh "'+cmd+' DST SRC" ${SOURCES[1]} $TARGET'
            curvatures = env.Command(
                curr_dir+'ricci'+str(n_leaves)+'.tsv',
                [graphs[graph_type][n_leaves],
                    tangle_idxs[graph_type][n_leaves]],
                full_cmd)
            results = env.Command(
                curr_dir+'results'+str(n_leaves)+'.p.gz',
                [curvatures,
                 tangle_newicks[graph_type][n_leaves],
                 tangle_degrees[graph_type][n_leaves]],
                scripts_dir+'merge-results.py $SOURCES $TARGET')
            env.Command(
                curr_dir+'hexbin'+str(n_leaves)+'.svg',
                [scripts_dir+'plot.py', results],
                '${SOURCES[0]} --which hexbin ${SOURCES[1]} $TARGET')
            env.Command(
                curr_dir+'scatter'+str(n_leaves)+'.png',
                [scripts_dir+'plot.py', results],
                '${SOURCES[0]} --which scatter ${SOURCES[1]} $TARGET')
            env.Command(
                curr_dir+'scatter'+str(n_leaves)+'.html.gz',
                [scripts_dir+'plot.py', results],
                '${SOURCES[0]} --d3 --which scatter ${SOURCES[1]} $TARGET')

            prefix = curr_dir+'access'+str(n_leaves)
            env.Command(
                [prefix+'-expected.svg',
                 prefix+'-distribution.svg'],
                [scripts_dir+'plot-access.py',
                 access[graph_type][n_leaves],
                 tangle_idxs[graph_type][n_leaves],
                 tangle_degrees[graph_type][n_leaves],
                 curvatures],
                '${{SOURCES[0]}} --maxtime 8 --prefix {} ${{SOURCES[1:]}}'.format(prefix))
